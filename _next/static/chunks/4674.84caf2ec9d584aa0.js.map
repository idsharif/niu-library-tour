{"version":3,"file":"static/chunks/4674.84caf2ec9d584aa0.js","mappings":"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","sources":["webpack://_N_E/./containers/ThemeBaseKrpano/FlickityScenes.tsx","webpack://_N_E/./containers/ThemeBaseKrpano/ListScene.tsx","webpack://_N_E/./containers/ThemeBaseKrpano/Controlbar.tsx","webpack://_N_E/./node_modules/flickity/css/flickity.css","webpack://_N_E/<anon>"],"sourcesContent":["import { I_Scene } from '@containers/Home/types';\nimport Flickity from 'react-flickity-component';\nimport 'flickity/css/flickity.css';\n\ninterface I_ListSceneProps {\n  sceneSelected?: I_Scene;\n  scenesGroupActive?: I_Scene[];\n  onSetRef: (c) => void;\n}\n\nexport function ListSceneFlickity({\n  onSetRef,\n  scenesGroupActive,\n  sceneSelected,\n}: I_ListSceneProps) {\n  return (\n    <Flickity\n      elementType=\"div\"\n      className=\"carousel\"\n      flickityRef={c => {\n        if (c) onSetRef(c);\n      }}\n      options={{\n        freeScroll: true,\n        freeScrollFriction: 0.03,\n        contain: true,\n        prevNextButtons: false,\n        pageDots: false,\n        lazyLoad: true,\n        cellAlign: 'left',\n      }}\n    >\n      {scenesGroupActive.map(scene => (\n        <div\n          key={scene.id}\n          className={`${\n            sceneSelected?.id === scene.id ? 'active' : ''\n          } itemScene`}\n        >\n          <img\n            src={\n              scene.screenshot ||\n              scene.media?.src_thumb ||\n              scene.media?.src_preview ||\n              ''\n            }\n            alt=\"\"\n          />\n          <h2 className=\"--sceneTitle\">{scene.title}</h2>\n        </div>\n      ))}\n    </Flickity>\n  );\n}\n\nexport default ListSceneFlickity;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\nimport {\n  selectListGroup,\n  selectSceneSelected,\n} from '@containers/Home/selectors';\nimport { I_Scene } from '@containers/Home/types';\nimport React, {\n  Ref,\n  useRef,\n  useMemo,\n  useEffect,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { Tabs } from 'antd';\nimport ListSceneFlickity from './FlickityScenes';\nimport { FlickityStyle } from '@styles/flickity';\nimport { ListSceneWrapper } from './styled';\nimport 'flickity/css/flickity.css';\n\ninterface Props {\n  isShowListScene: boolean;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nexport type Type_RefFuncSlide = {\n  onPrevScene: () => void;\n  onNextScene: () => void;\n};\n\nconst ListScene = forwardRef(\n  ({ onChangeScene, isShowListScene }: Props, ref: Ref<Type_RefFuncSlide>) => {\n    const flickityRef = useRef(null!);\n\n    const [isShowFlickity, setIsShowFlickity] = useState(false);\n\n    const listGroup = useSelector(selectListGroup);\n    const sceneSelected = useSelector(selectSceneSelected);\n\n    const groupActive = useMemo(\n      () =>\n        listGroup.length === 1 && listGroup[0].id === 'uncategory'\n          ? 'uncategory'\n          : listGroup.filter(item => sceneSelected?.group === item.id)[0]?.id ||\n            '',\n      [listGroup, sceneSelected],\n    );\n\n    const scenesGroupActive = useMemo(\n      () => listGroup.filter(item => item.id === groupActive)[0]?.scenes || [],\n      [groupActive, listGroup],\n    );\n\n    const currentIndex = useMemo(\n      () => scenesGroupActive.findIndex(item => item.id === sceneSelected?.id),\n      [sceneSelected, scenesGroupActive],\n    );\n\n    const onClickScene = useCallback(\n      (_event, _pointer, cellElement, cellIndex) => {\n        if (!cellElement) return;\n        onChangeScene(scenesGroupActive[cellIndex]);\n      },\n      [onChangeScene, scenesGroupActive],\n    );\n\n    useImperativeHandle(ref, () => ({\n      onPrevScene() {\n        if (currentIndex !== 0) {\n          const index = currentIndex - 1;\n          onChangeScene(scenesGroupActive[index]);\n          flickityRef.current.select(index, false);\n        }\n      },\n      onNextScene() {\n        if (currentIndex + 1 !== scenesGroupActive.length) {\n          const index = currentIndex + 1;\n          onChangeScene(scenesGroupActive[index]);\n          flickityRef.current.select(index, false);\n        }\n      },\n    }));\n\n    useEffect(() => {\n      setIsShowFlickity(true);\n    }, []);\n\n    useEffect(() => {\n      if (flickityRef?.current)\n        flickityRef.current?.on('staticClick', onClickScene);\n      return () => {\n        if (flickityRef?.current)\n          flickityRef.current?.off('staticClick', onClickScene);\n      };\n    }, [groupActive, onClickScene, isShowFlickity]);\n\n    return (\n      <ListSceneWrapper\n        className={`${isShowListScene ? '' : '--hide'} ${\n          listGroup.length === 1 && listGroup[0].id === 'uncategory'\n            ? 'hideNav'\n            : ''\n        }`}\n      >\n        {listGroup.length === 1 && listGroup[0].id === 'uncategory' ? (\n          isShowFlickity && (\n            <ListSceneFlickity\n              sceneSelected={sceneSelected}\n              scenesGroupActive={scenesGroupActive}\n              onSetRef={c => {\n                if (!flickityRef.current && c) {\n                  flickityRef.current = c;\n                  flickityRef.current?.on('staticClick', onClickScene);\n                }\n              }}\n            />\n          )\n        ) : (\n          <Tabs\n            activeKey={groupActive}\n            tabPosition=\"top\"\n            onTabClick={key => {\n              const group = listGroup.filter(item => item.id === key)[0];\n              if (group.scenes) {\n                flickityRef.current = null;\n                onChangeScene(group.scenes[0]);\n              }\n            }}\n            className=\"--tabs\"\n          >\n            {listGroup.map(group => (\n              <Tabs.TabPane\n                tab={`${group.name || 'N/A'}`}\n                key={group.id}\n                className={`itemSceneCate ${\n                  groupActive === group.id ? 'active' : ''\n                }`}\n              >\n                {groupActive === group.id && isShowFlickity && (\n                  <ListSceneFlickity\n                    key={groupActive}\n                    sceneSelected={sceneSelected}\n                    scenesGroupActive={scenesGroupActive}\n                    onSetRef={c => {\n                      if (!flickityRef.current) {\n                        flickityRef.current = c;\n                        flickityRef.current?.on('staticClick', onClickScene);\n                      }\n                    }}\n                  />\n                )}\n              </Tabs.TabPane>\n            ))}\n          </Tabs>\n        )}\n        <FlickityStyle />\n      </ListSceneWrapper>\n    );\n  },\n);\n\nexport default ListScene;\n","import dynamic from 'next/dynamic';\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useSelector } from 'react-redux';\nimport {\n  selectDetailProject,\n  selectSceneSelected,\n  selectThemeConfigGlobal,\n} from '@containers/Home/selectors';\nimport { I_Scene } from '@containers/Home/types';\nimport { ControlbarWrapper } from './styled';\nimport ListScene, { Type_RefFuncSlide } from './ListScene';\n\nconst ControlbarAction = dynamic(() => import('./Controlbar.Action'));\n\ninterface Props {\n  krpanoRef?: Type_RefFuncKrpano;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nexport const Controlbar = memo(({ krpanoRef, onChangeScene }: Props) => {\n  const listSceneRef = useRef<Type_RefFuncSlide>(null!);\n  const themeConfig = useSelector(selectThemeConfigGlobal);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const detailProject = useSelector(selectDetailProject);\n\n  const [isShowListScene, setIsShowListScene] = useState(false);\n  const [isShowControlbar, setIsShowControlbar] = useState(true);\n\n  const onToggleControlbar = useCallback(\n    () => setIsShowControlbar(prev => !prev),\n    [],\n  );\n\n  const onToggleListScene = useCallback(\n    () => setIsShowListScene(prev => !prev),\n    [],\n  );\n\n  const onPrevScene = useCallback(\n    () => listSceneRef.current?.onPrevScene(),\n    [],\n  );\n  const onNextScene = useCallback(\n    () => listSceneRef.current?.onNextScene(),\n    [],\n  );\n\n  useEffect(() => {\n    if (themeConfig?.selected === 'basekrpano')\n      setIsShowListScene(!!themeConfig?.config?.autoOpenSceneList);\n  }, [themeConfig]);\n\n  return (\n    <ControlbarWrapper\n      className={`--controlbar-${isShowControlbar ? 'on' : 'off'}`}\n    >\n      <div className=\"--title hide-scrollbar\">\n        <h1>{detailProject.title || 'N/A'}</h1>\n        <span> &nbsp;·&nbsp; </span>\n        <span>{sceneSelected?.title || 'N/A'}</span>\n      </div>\n\n      <div className=\"--mainPanel\">\n        <ListScene\n          ref={listSceneRef}\n          onChangeScene={onChangeScene}\n          isShowListScene={isShowListScene}\n        />\n        <ControlbarAction\n          krpanoRef={krpanoRef}\n          onPrevScene={onPrevScene}\n          onNextScene={onNextScene}\n          isShowListScene={isShowListScene}\n          isShowControlbar={isShowControlbar}\n          onToggleListScene={onToggleListScene}\n          onToggleControlbar={onToggleControlbar}\n        />\n      </div>\n    </ControlbarWrapper>\n  );\n});\n\nexport default Controlbar;\n","// extracted by mini-css-extract-plugin"],"names":["FlickityScenes","param","onSetRef","scenesGroupActive","sceneSelected","jsx_runtime","jsx","Flickity","elementType","className","flickityRef","c","options","freeScroll","freeScrollFriction","contain","prevNextButtons","pageDots","lazyLoad","cellAlign","map","scene","jsxs","div","concat","id","img","src","screenshot","media","src_thumb","src_preview","alt","h2","title","ListScene","forwardRef","ref","onChangeScene","isShowListScene","useRef","useState","isShowFlickity","setIsShowFlickity","listGroup","useSelector","selectListGroup","selectSceneSelected","groupActive","useMemo","length","filter","item","group","scenes","currentIndex","findIndex","onClickScene","useCallback","_event","_pointer","cellElement","cellIndex","useImperativeHandle","onPrevScene","index","current","select","onNextScene","useEffect","on","off","ListSceneWrapper","ListSceneFlickity","Tabs","activeKey","tabPosition","onTabClick","key","tab","name","FlickityStyle","ControlbarAction","dynamic","Promise","all","__webpack_require__","e","then","bind","Controlbar","memo","krpanoRef","listSceneRef","themeConfig","selectThemeConfigGlobal","detailProject","selectDetailProject","setIsShowListScene","isShowControlbar","setIsShowControlbar","onToggleControlbar","prev","onToggleListScene","selected","config","autoOpenSceneList","ControlbarWrapper","h1","span","ThemeBaseKrpano_Controlbar"],"sourceRoot":""}