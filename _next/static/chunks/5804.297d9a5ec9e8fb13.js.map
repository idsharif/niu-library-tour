{"version":3,"file":"static/chunks/5804.297d9a5ec9e8fb13.js","mappings":"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","sources":["webpack://_N_E/./containers/ThemeDefault/ListScene.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {\n  selectListGroup,\n  selectListSceneByGroup,\n  selectSceneSelected,\n} from '@containers/Home/selectors';\nimport { I_Scene } from '@containers/Home/types';\nimport { toggleItemArrs } from '@utils/helper';\nimport React, { memo, useEffect, useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ListSceneWrapper } from './styled';\n\ninterface Props {\n  isShowListScene: boolean;\n  setIsShowListScene: React.Dispatch<React.SetStateAction<boolean>>;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nexport const ListScene = memo(\n  ({ isShowListScene, setIsShowListScene, onChangeScene }: Props) => {\n    const containerRef = useRef<HTMLDivElement>(null!);\n    const sceneActiveRef = useRef<HTMLDivElement>(null!);\n\n    const listGroup = useSelector(selectListGroup);\n    const listScene = useSelector(selectListSceneByGroup);\n    const sceneSelected = useSelector(selectSceneSelected);\n\n    const [listGroupCollapse, setListGroupCollapse] = useState([]);\n\n    const onToggleCollapse = useCallback(\n      id => {\n        const listXor = toggleItemArrs(listGroupCollapse, id);\n        setListGroupCollapse(listXor);\n      },\n      [listGroupCollapse],\n    );\n\n    const onOpenListScene = e => {\n      e.stopPropagation();\n      setIsShowListScene(true);\n    };\n\n    const onCloseListScene = e => {\n      e.stopPropagation();\n      setIsShowListScene(false);\n    };\n\n    useEffect(() => {\n      if (containerRef.current && sceneActiveRef.current && !isShowListScene)\n        containerRef.current.scrollTo({\n          top: sceneActiveRef.current.offsetTop - 50,\n          behavior: 'smooth',\n        });\n      // sceneActiveRef.current.scrollTo();\n    }, [isShowListScene, sceneSelected]);\n\n    return (\n      <ListSceneWrapper\n        onMouseOver={onOpenListScene}\n        onMouseLeave={onCloseListScene}\n        className={`leftSidebar ${isShowListScene ? 'active' : ''}`}\n        onTouchStart={onCloseListScene}\n      >\n        <div\n          className={`closeBtn ${isShowListScene ? 'show' : 'hide'}`}\n          onClick={onCloseListScene}\n        >\n          <i aria-hidden className=\"fal fa-times\" />\n        </div>\n        <div className=\"galleryDots\" onClick={onOpenListScene}>\n          {listScene.map(item => (\n            <span\n              key={item.id}\n              className={item.id === sceneSelected?.id ? 'active' : ''}\n            />\n          ))}\n        </div>\n        <div\n          className=\"gallery\"\n          ref={containerRef}\n          onTouchStart={e => {\n            e.stopPropagation();\n          }}\n        >\n          {listGroup.map(item => (\n            <div key={item.id} className=\"galleryGroup\">\n              {item.name !== 'Uncategory' && (\n                <div\n                  className=\"galleryGroupName\"\n                  onClick={e => {\n                    e.stopPropagation();\n                    onToggleCollapse(item.id);\n                  }}\n                >\n                  <h5>{item.name}</h5>\n                  <i\n                    className={`fal fa-angle-${\n                      listGroupCollapse.indexOf(item.id) > -1 ? 'up' : 'down'\n                    }`}\n                  />\n                </div>\n              )}\n              {!!item.scenes.length && (\n                <div\n                  className={`galleryThumb ${\n                    listGroupCollapse.indexOf(item.id) > -1 ? 'hide' : 'show'\n                  }`}\n                >\n                  {item.scenes.map(scene => (\n                    <div\n                      key={scene.id}\n                      className={`galleryImg ${\n                        sceneSelected?.id === scene.id ? 'active' : ''\n                      }`}\n                      ref={node => {\n                        if (sceneSelected?.id === scene.id)\n                          sceneActiveRef.current = node;\n                      }}\n                      onClick={e => {\n                        e.stopPropagation();\n                        onChangeScene(scene);\n                      }}\n                    >\n                      <img\n                        src={\n                          scene.screenshot ||\n                          scene.media?.src_thumb ||\n                          scene.media?.src_preview ||\n                          scene.media?.src ||\n                          ''\n                        }\n                        alt=\"\"\n                      />\n                      <h2 className=\"--menuSceneTitle\">{scene.title}</h2>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </ListSceneWrapper>\n    );\n  },\n);\n\nexport default ListScene;\n"],"names":["ListScene","memo","param","isShowListScene","setIsShowListScene","onChangeScene","containerRef","useRef","sceneActiveRef","listGroup","useSelector","selectListGroup","listScene","selectListSceneByGroup","sceneSelected","selectSceneSelected","useState","listGroupCollapse","setListGroupCollapse","onToggleCollapse","useCallback","id","toggleItemArrs","onOpenListScene","e","stopPropagation","onCloseListScene","useEffect","current","scrollTo","top","offsetTop","behavior","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","ListSceneWrapper","onMouseOver","onMouseLeave","className","concat","onTouchStart","jsx","div","onClick","i","aria-hidden","map","item","span","ref","name","h5","indexOf","scenes","length","scene","node","img","src","screenshot","media","src_thumb","src_preview","alt","h2","title","__webpack_exports__"],"sourceRoot":""}