{"version":3,"file":"static/chunks/9767.77f1f3587fd9a2fb.js","mappings":"8NAcaA,EAAiB,SAAAC,CAAA,CAA0B,KAAvBC,EAAAA,EAAAA,SAAAA,CAE7BC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAU,CAAED,UAAAA,CAAU,GADhBE,EACND,EADMC,IAAAA,CAAMC,EACZF,EADYE,MAAAA,CAAQC,EACpBH,EADoBG,MAAAA,CAAQC,EAC5BJ,EAD4BI,OAAAA,CAASC,EACrCL,EADqCK,gBAAAA,CAAkBC,EACvDN,EADuDM,cAAAA,CAGnDC,EAAmBC,CAAAA,EAAAA,EAAAA,EAAAA,EAAYC,EAAAA,EAAsBA,EACrDC,EAAwBF,CAAAA,EAAAA,EAAAA,EAAAA,EAAYG,EAAAA,EAA2BA,EAEnEC,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,IAAK,GADlBC,EACLD,CAAAA,CAAAA,EAAAA,CADsCE,EACtCF,CAAAA,CAAAA,EAAAA,CACsDA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,QAAAA,EAEtDG,KAAAA,GAAAA,GAFKC,EAAiDJ,CAAAA,CAAAA,EAAAA,CAA3BK,EAA2BL,CAAAA,CAAAA,EAAAA,CAOlDM,EAAwBC,CAAAA,EAAAA,EAAAA,OAAAA,EAC5B,kBAAMT,EAAsBU,OAAO,EACnC,CAACV,EAAsBU,OAAO,CAAC,EAE3BC,EAAoBF,CAAAA,EAAAA,EAAAA,OAAAA,EACxB,kBAAMT,EAAsBY,EAAE,EAC9B,CAACZ,EAAsBY,EAAE,CAAC,EAEtBC,EAAkBJ,CAAAA,EAAAA,EAAAA,OAAAA,EACtB,kBAAMT,EAAsBc,QAAQ,EACpC,CAACd,EAAsB,EAEnBe,EAAoBN,CAAAA,EAAAA,EAAAA,OAAAA,EACxB,kBAAMZ,EAAiBa,OAAO,EAC9B,CAACb,EAAiB,EAEdmB,EAAqBP,CAAAA,EAAAA,EAAAA,OAAAA,EACzB,kBAAMZ,EAAiBe,EAAE,EACzB,CAACf,EAAiB,EAKdoB,EAAwBC,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,CAG9Cd,EAAmC,IACnCG,EAAwB,CAACM,GAAkB,CAACM,EAAAA,EAA8BA,CAC5E,EAAG,CAACN,EAAgB,EAKdO,EAAyBF,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KAI/C7B,CAHAA,OAAAA,GAAAA,EACIgC,YAAY,GACbC,gBAAgB,CAAC,YAAaL,GACjC5B,IACgB,GADhBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EACIgC,YAAY,KADhBhC,KAAAA,IAAAA,GAAAA,EAEIiC,gBAAAA,CAAiB,aAAcL,EACrC,EAAG,CAAC5B,EAAW4B,EAAsB,EAE/BM,EAA0BL,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KAChD7B,EAGAA,CAHAA,CACgB,OADhBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EACIgC,YAAY,KADhBhC,KAAAA,IAAAA,GAAAA,EAEImC,mBAAAA,CAAoB,YAAaP,GACrC5B,IACgB,GADhBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EACIgC,YAAY,KADhBhC,KAAAA,IAAAA,GAAAA,EAEImC,mBAAAA,CAAoB,aAAcP,EACxC,EAAG,CAAC5B,EAAW4B,EAAsB,EAG/BQ,EAAUP,CAAAA,EAAAA,EAAAA,WAAAA,EACdQ,SAAAA,CAAAA,CAAK,CACH,OAAQA,EAAEC,OAAO,EACf,KAAK,GAML,KAAK,GALHhC,IACA,KAAM,MACH,GAML,KAAK,GALHC,GAUJ,CACF,EACA,CAACD,EAAkBC,EAAe,EAG9BgC,EAAYV,CAAAA,EAAAA,EAAAA,WAAAA,EAChBQ,SAAAA,CAAAA,CAAK,CACH,OAAQA,EAAEC,OAAO,EACf,KAAK,GACHlC,IACA,KAAM,MACH,GACHF,IACA,KAAM,MACH,GACHG,IACA,KAAM,MACH,GACHF,GAIJ,CACF,EACA,CAACA,EAAQC,EAAQC,EAASH,EAAK,EAG3BsC,EAAuBX,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KAC7C7B,EACAA,CADAA,CAAuB,OAAvBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWgC,YAAY,KAAvBhC,KAAAA,IAAAA,GAAAA,EAA2BiC,gBAAAA,CAAiB,QAASG,GACrDpC,IAAuB,GAAvBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWgC,YAAY,KAAvBhC,KAAAA,IAAAA,GAAAA,EAA2BiC,gBAAAA,CAAiB,UAAWM,EACzD,EAAG,CAACvC,EAAWuC,EAAWH,EAAQ,EAE5BK,EAAwBZ,CAAAA,EAAAA,EAAAA,WAAAA,EAAY,UAAM,KAC9C7B,EACAA,CADAA,CAAuB,OAAvBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWgC,YAAY,KAAvBhC,KAAAA,IAAAA,GAAAA,EAA2BmC,mBAAAA,CAAoB,QAASC,GACxDpC,IAAuB,GAAvBA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAWgC,YAAY,KAAvBhC,KAAAA,IAAAA,GAAAA,EAA2BmC,mBAAAA,CAAoB,UAAWI,EAC5D,EAAG,CAACvC,EAAWuC,EAAWH,EAAQ,EAElC,MAAOhB,CAAAA,EAAAA,EAAAA,OAAAA,EACL,iBAAO,CACLE,kBAAAA,EACAE,gBAAAA,EACAL,sBAAAA,EACAQ,mBAAAA,EACAD,kBAAAA,EAEAT,qBAAAA,EACAC,wBAAAA,EACAJ,gCAAAA,EACAC,mCAAAA,EAEAyB,qBAAAA,EACAC,sBAAAA,EACAV,uBAAAA,EACAG,wBAAAA,CACF,GACA,CACEZ,EACAE,EACAL,EACAQ,EACAD,EACAT,EACAH,EACA0B,EACAC,EACAV,EACAG,EACD,CAEL,EC5EAQ,EAhFkBC,CAAAA,EAAAA,EAAAA,IAAAA,EAChB,SAAA5C,CAAA,CAAgE,KAA7D6C,EAAAA,EAAAA,QAAAA,CAAUC,EAAAA,EAAAA,aAAAA,CAAeC,EAAAA,EAAAA,WAAAA,CAAa9C,EAAAA,EAAAA,SAAAA,CACjC+C,EAA0BC,CAAAA,EAAAA,EAAAA,MAAAA,EAAY,IAAI,EAqB5ClD,EAAAA,EAAe,CAAEE,UAAAA,CAAU,GAlB7BwB,EAkBE1B,EAlBF0B,eAAAA,CACAF,EAiBExB,EAjBFwB,iBAAAA,CACAH,EAgBErB,EAhBFqB,qBAAAA,CAEAQ,EAcE7B,EAdF6B,kBAAAA,CACAD,EAaE5B,EAbF4B,iBAAAA,CAEAT,EAWEnB,EAXFmB,oBAAAA,CACAC,EAUEpB,EAVFoB,uBAAAA,CAEAJ,EAQEhB,EARFgB,+BAAAA,CACAC,EAOEjB,EAPFiB,kCAAAA,CAEAgB,EAKEjC,EALFiC,sBAAAA,CACAG,EAIEpC,EAJFoC,uBAAAA,CAEAM,EAEE1C,EAFF0C,oBAAAA,CACAC,EACE3C,EADF2C,qBAAAA,CAsDF,MAnDAQ,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACd/B,EAAwBM,EAE1B,EAAG,CAACA,EAAgB,EAKpByB,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CACVvB,GAAqBC,GAAsBiB,GAAUC,GAE3D,EAAG,CAACnB,EAAmBkB,EAAUC,EAAc,EAK/CI,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CASd,OARI3B,GAAqBE,GAAmBoB,IAC1CG,EAAwBG,OAAO,CAAGC,YAAY,UAAM,CAClDL,IACA5B,EAAwBM,EAC1B,EAAG,IAACP,CAAAA,GAAwBO,CAAAA,GACxBV,GACFC,EAAmC,KAEhC,UAAM,CACPgC,EAAwBG,OAAO,EACjCE,cAAcL,EAAwBG,OAAO,CACjD,CAEF,EAAG,CAACN,EAAUtB,EAAmBR,EAAgC,EAKjEmC,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CAEd,OADI9B,GAAyBG,GAAmBS,IACzC,UAAM,CACNT,GAAmBY,GAC1B,CAEF,EAAG,CAACZ,EAAmBH,EAAsB,EAE7C8B,CAAAA,EAAAA,EAAAA,SAAAA,EAAU,UAAM,CAEd,OADAT,IACO,UAAM,CACXC,GACF,CAEF,EAAG,EAAE,EAEE,GAAAY,EAAAC,GAAA,EAACC,MAAAA,CAAAA,EACV","sources":["webpack://_N_E/./containers/Home/hook/useEventKrpano.tsx","webpack://_N_E/./containers/Home/components/Tour.Event.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { TIME_DELAY_PAUSE_AUTOPLAYSCENE } from '@containers/Home/constants';\nimport { useState, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  selectConfigAutoRotate,\n  selectConfigAutoChangeScene,\n} from '../selectors';\nimport { useKrpano } from './useKrpano';\n\ninterface Props {\n  krpanoRef?: Type_RefFuncKrpano;\n}\n\nexport const useEventKrpano = ({ krpanoRef }: Props) => {\n  const { onUp, onDown, onLeft, onRight, onStopHorizontal, onStopVertical } =\n    useKrpano({ krpanoRef });\n\n  const configAutoRotate = useSelector(selectConfigAutoRotate);\n  const configAutoChangeScene = useSelector(selectConfigAutoChangeScene);\n  const [isTemporaryPauseAutoChangeScene, setIsTemporaryPauseAutoChangeScene] =\n    useState<boolean>(false);\n  const [timePauseChangeScene, setTimePauseChangeScene] = useState<\n    number | undefined\n  >(undefined);\n\n  // const intervalTimeChangeScene = useRef<any>(null!);\n\n  // NOTE: auto change scene\n  const enableAutoChangeScene = useMemo(\n    () => configAutoChangeScene.enabled,\n    [configAutoChangeScene.enabled],\n  );\n  const isAutoChangeScene = useMemo(\n    () => configAutoChangeScene.on,\n    [configAutoChangeScene.on],\n  );\n  const timeChangeScene = useMemo(\n    () => configAutoChangeScene.waitTime,\n    [configAutoChangeScene],\n  );\n  const enabledAutoRotate = useMemo(\n    () => configAutoRotate.enabled,\n    [configAutoRotate],\n  );\n  const isTurnOnAutoRotate = useMemo(\n    () => configAutoRotate.on,\n    [configAutoRotate],\n  );\n\n  // SECTION: auto change scene\n\n  const onStopAutoChangeScene = useCallback(() => {\n    // if (intervalTimeChangeScene.current)\n    //   clearInterval(intervalTimeChangeScene.current);\n    setIsTemporaryPauseAutoChangeScene(true);\n    setTimePauseChangeScene(+timeChangeScene + +TIME_DELAY_PAUSE_AUTOPLAYSCENE);\n  }, [timeChangeScene]);\n\n  /**\n   * NOTE: add event remove autochangescene\n   */\n  const onEventAutoChangeScene = useCallback(() => {\n    krpanoRef\n      ?.getContainer()\n      .addEventListener('mousedown', onStopAutoChangeScene);\n    krpanoRef\n      ?.getContainer()\n      ?.addEventListener('touchstart', onStopAutoChangeScene);\n  }, [krpanoRef, onStopAutoChangeScene]);\n\n  const offEventAutoChangeScene = useCallback(() => {\n    krpanoRef\n      ?.getContainer()\n      ?.removeEventListener('mousedown', onStopAutoChangeScene);\n    krpanoRef\n      ?.getContainer()\n      ?.removeEventListener('touchstart', onStopAutoChangeScene);\n  }, [krpanoRef, onStopAutoChangeScene]);\n\n  // NOTE: event move scene by keycode\n  const onKeyUp = useCallback(\n    e => {\n      switch (e.keyCode) {\n        case 37:\n          onStopHorizontal();\n          break;\n        case 38:\n          onStopVertical();\n          break;\n        case 39:\n          onStopHorizontal();\n          break;\n        case 40:\n          onStopVertical();\n          break;\n        default:\n          break;\n      }\n    },\n    [onStopHorizontal, onStopVertical],\n  );\n\n  const onKeyDown = useCallback(\n    e => {\n      switch (e.keyCode) {\n        case 37:\n          onLeft();\n          break;\n        case 38:\n          onUp();\n          break;\n        case 39:\n          onRight();\n          break;\n        case 40:\n          onDown();\n          break;\n        default:\n          break;\n      }\n    },\n    [onDown, onLeft, onRight, onUp],\n  );\n\n  const onEventMoveByKeyCode = useCallback(() => {\n    krpanoRef?.getContainer()?.addEventListener('keyup', onKeyUp);\n    krpanoRef?.getContainer()?.addEventListener('keydown', onKeyDown);\n  }, [krpanoRef, onKeyDown, onKeyUp]);\n\n  const offEventMoveByKeyCode = useCallback(() => {\n    krpanoRef?.getContainer()?.removeEventListener('keyup', onKeyUp);\n    krpanoRef?.getContainer()?.removeEventListener('keydown', onKeyDown);\n  }, [krpanoRef, onKeyDown, onKeyUp]);\n\n  return useMemo(\n    () => ({\n      isAutoChangeScene,\n      timeChangeScene,\n      enableAutoChangeScene,\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      //\n      timePauseChangeScene,\n      setTimePauseChangeScene,\n      isTemporaryPauseAutoChangeScene,\n      setIsTemporaryPauseAutoChangeScene,\n      //\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n    }),\n    [\n      isAutoChangeScene,\n      timeChangeScene,\n      enableAutoChangeScene,\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      timePauseChangeScene,\n      isTemporaryPauseAutoChangeScene,\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n    ],\n  );\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useEventKrpano } from '@containers/Home/hook/useEventKrpano';\nimport React, { memo, useEffect, useRef } from 'react';\n\ninterface Props {\n  isLoaded: boolean;\n  onNextScene: () => void;\n  onStartRotate?: () => void;\n  krpanoRef: Type_RefFuncKrpano;\n}\n\nconst TourEvent = memo(\n  ({ isLoaded, onStartRotate, onNextScene, krpanoRef }: Props) => {\n    const intervalTimeChangeScene = useRef<any>(null!);\n\n    const {\n      timeChangeScene,\n      isAutoChangeScene,\n      enableAutoChangeScene,\n      //\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      //\n      timePauseChangeScene,\n      setTimePauseChangeScene,\n      //\n      isTemporaryPauseAutoChangeScene,\n      setIsTemporaryPauseAutoChangeScene,\n      //\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n      //\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n    } = useEventKrpano({ krpanoRef });\n\n    useEffect(() => {\n      setTimePauseChangeScene(timeChangeScene);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeChangeScene]);\n\n    /**\n     * NOTE: auto rotate (only when isLoaded)\n     */\n    useEffect(() => {\n      if (enabledAutoRotate && isTurnOnAutoRotate && isLoaded) onStartRotate();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [enabledAutoRotate, isLoaded, onStartRotate]);\n\n    /**\n     * NOTE: event autochangescene\n     */\n    useEffect(() => {\n      if (isAutoChangeScene && timeChangeScene && isLoaded) {\n        intervalTimeChangeScene.current = setInterval(() => {\n          onNextScene();\n          setTimePauseChangeScene(timeChangeScene);\n        }, (timePauseChangeScene || timeChangeScene) * 1000);\n        if (isTemporaryPauseAutoChangeScene)\n          setIsTemporaryPauseAutoChangeScene(false);\n      }\n      return () => {\n        if (intervalTimeChangeScene.current)\n          clearInterval(intervalTimeChangeScene.current);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, isAutoChangeScene, isTemporaryPauseAutoChangeScene]);\n\n    /**\n     * NOTE: add event remove autochangescene\n     */\n    useEffect(() => {\n      if (enableAutoChangeScene && isAutoChangeScene) onEventAutoChangeScene();\n      return () => {\n        if (!isAutoChangeScene) offEventAutoChangeScene();\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isAutoChangeScene, enableAutoChangeScene]);\n\n    useEffect(() => {\n      onEventMoveByKeyCode();\n      return () => {\n        offEventMoveByKeyCode();\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return <div />;\n  },\n);\n\nexport default TourEvent;\n"],"names":["useEventKrpano","param","krpanoRef","useKrpano","onUp","onDown","onLeft","onRight","onStopHorizontal","onStopVertical","configAutoRotate","useSelector","selectConfigAutoRotate","configAutoChangeScene","selectConfigAutoChangeScene","useState","isTemporaryPauseAutoChangeScene","setIsTemporaryPauseAutoChangeScene","undefined","timePauseChangeScene","setTimePauseChangeScene","enableAutoChangeScene","useMemo","enabled","isAutoChangeScene","on","timeChangeScene","waitTime","enabledAutoRotate","isTurnOnAutoRotate","onStopAutoChangeScene","useCallback","TIME_DELAY_PAUSE_AUTOPLAYSCENE","onEventAutoChangeScene","getContainer","addEventListener","offEventAutoChangeScene","removeEventListener","onKeyUp","e","keyCode","onKeyDown","onEventMoveByKeyCode","offEventMoveByKeyCode","Tour_Event","memo","isLoaded","onStartRotate","onNextScene","intervalTimeChangeScene","useRef","useEffect","current","setInterval","clearInterval","jsx_runtime","jsx","div"],"sourceRoot":""}