{"version":3,"file":"static/chunks/9914.ad4bccccecadf763.js","mappings":"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","sources":["webpack://_N_E/./node_modules/antd/es/_util/motion.js","webpack://_N_E/./node_modules/antd/es/_util/type.js","webpack://_N_E/./containers/Home/hook/useControlbarConfig.tsx","webpack://_N_E/./containers/Home/language.ts","webpack://_N_E/./containers/ThemeSolid/Controlbar.Center.tsx","webpack://_N_E/./node_modules/rc-util/es/hooks/useLayoutEffect.js","webpack://_N_E/<anon>"],"sourcesContent":["import { tuple } from './type';\n// ================== Collapse Motion ==================\nvar getCollapsedHeight = function getCollapsedHeight() {\n  return {\n    height: 0,\n    opacity: 0\n  };\n};\nvar getRealHeight = function getRealHeight(node) {\n  var scrollHeight = node.scrollHeight;\n  return {\n    height: scrollHeight,\n    opacity: 1\n  };\n};\nvar getCurrentHeight = function getCurrentHeight(node) {\n  return {\n    height: node ? node.offsetHeight : 0\n  };\n};\nvar skipOpacityTransition = function skipOpacityTransition(_, event) {\n  return (event === null || event === void 0 ? void 0 : event.deadline) === true || event.propertyName === 'height';\n};\nvar collapseMotion = {\n  motionName: 'ant-motion-collapse',\n  onAppearStart: getCollapsedHeight,\n  onEnterStart: getCollapsedHeight,\n  onAppearActive: getRealHeight,\n  onEnterActive: getRealHeight,\n  onLeaveStart: getCurrentHeight,\n  onLeaveActive: getCollapsedHeight,\n  onAppearEnd: skipOpacityTransition,\n  onEnterEnd: skipOpacityTransition,\n  onLeaveEnd: skipOpacityTransition,\n  motionDeadline: 500\n};\nvar SelectPlacements = tuple('bottomLeft', 'bottomRight', 'topLeft', 'topRight');\nvar getTransitionDirection = function getTransitionDirection(placement) {\n  if (placement !== undefined && (placement === 'topLeft' || placement === 'topRight')) {\n    return \"slide-down\";\n  }\n  return \"slide-up\";\n};\nvar getTransitionName = function getTransitionName(rootPrefixCls, motion, transitionName) {\n  if (transitionName !== undefined) {\n    return transitionName;\n  }\n  return \"\".concat(rootPrefixCls, \"-\").concat(motion);\n};\nexport { getTransitionName, getTransitionDirection };\nexport default collapseMotion;","// https://stackoverflow.com/questions/46176165/ways-to-get-string-literal-type-of-array-values-without-enum-overhead\nexport var tuple = function tuple() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args;\n};\nexport var tupleNum = function tupleNum() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args;\n};","import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectConfigControlbar } from '../selectors';\nimport { I_ControlbarKey } from '../types';\n\nexport const useControlbarConfig = () => {\n  const controlbarConfig = useSelector(selectConfigControlbar);\n\n  const onCheckIsShowContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config = controlbarConfig[type];\n        return !config.isHide;\n      }\n      return true;\n    },\n    [controlbarConfig],\n  );\n\n  const onRenderContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config = controlbarConfig[type];\n        if (config.type === 'icon' && config.icon)\n          return (\n            <i aria-hidden className={`controlbar-item__icon ${config.icon}`} />\n          );\n        if (config.type === 'image' && config.image?.src)\n          return (\n            <img\n              className=\"controlbar-item__img\"\n              src={config.image?.src}\n              alt=\"img\"\n            />\n          );\n      }\n      return '';\n    },\n    [controlbarConfig],\n  );\n\n  return useMemo(\n    () => ({\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    }),\n    [onRenderContentControlbarItem, onCheckIsShowContentControlbarItem],\n  );\n};\n","export const LANGUAGES = {\n  en: {\n    dialogConfirmSoundTitle: 'Auto play sound on this website?',\n    btnOK: 'OK',\n    btnCancel: 'Cancel',\n    controlbarFirstScene: 'Go to first scene',\n    controlbarInfoTour: 'Info Tour',\n    controlbarInfoScene: 'Info Scene',\n    controlbarMap: 'Google Map',\n    controlbarFloorplan: 'Floorplan',\n    controlbarTurnOnSoundProject: 'Unmute sound',\n    controlbarTurnOffSoundProject: 'Mute sound',\n    controlbarSoundScene: 'Sound scene',\n    controlbarStopRotate: 'Stop Rotate',\n    controlbarStartRotate: 'Rotate',\n    controlbarStartAutoPlayScene: 'Auto play scene',\n    controlbarStopAutoPlayScene: 'Stop auto play scene',\n    controlbarVRMode: 'VR Mode',\n    controlbarFullscreen: 'Toggle Fullscreen',\n    controlbarViewNormal: 'View Normal',\n    controlbarViewPlanet: 'View Little Planet',\n    controlbarViewMirrorBall: 'View Mirror Ball',\n    controlbarSettingColor: 'Change color',\n    controlbarTurnOffModeMultipleStaging: 'Disable Staging',\n    controlbarTurnOnModeMultipleStaging: 'Enable Staging',\n  },\n  vi: {\n    dialogConfirmSoundTitle: 'Tự động phát nhạc?',\n    btnOK: 'OK',\n    btnCancel: 'Huỷ bỏ',\n    controlbarFirstScene: 'Cảnh đầu tiên',\n    controlbarInfoTour: 'Thông tin tour',\n    controlbarInfoScene: 'Thông tin cảnh',\n    controlbarFloorplan: 'Floorplan',\n    controlbarMap: 'Google Map',\n    controlbarTurnOnSoundProject: 'Bật âm lượng',\n    controlbarTurnOffSoundProject: 'Tắt âm lượng',\n    controlbarSoundScene: 'Âm thanh cảnh',\n    controlbarStopRotate: 'Dừng xoay',\n    controlbarStartRotate: 'Xoay',\n    controlbarStartAutoPlayScene: 'Tự động chuyển cảnh',\n    controlbarStopAutoPlayScene: 'Dừng tự động chuyển cảnh',\n    controlbarVRMode: 'Chế độ VR',\n    controlbarFullscreen: 'Chuyển đổi chế độ toàn màn hình',\n    controlbarViewNormal: 'Chế độ mặc định',\n    controlbarViewPlanet: 'Chế độ toàn cầu',\n    controlbarViewMirrorBall: 'Chế độ gương',\n    controlbarSettingColor: 'Thay đổi màu',\n    controlbarTurnOffModeMultipleStaging: 'Tắt chế độ Staging',\n    controlbarTurnOnModeMultipleStaging: 'Bật chế độ Staging',\n  },\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useControlbarConfig } from '@containers/Home/hook/useControlbarConfig';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport { LANGUAGES } from '@containers/Home/language';\nimport { selectLanguageProject } from '@containers/Home/selectors';\nimport { Tooltip } from 'antd';\nimport React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano;\n}\n\nconst ControlbarCenter = memo(({ krpanoRef }: Props) => {\n  const [\n    { isSoundOnScene, visibleDialogPostScene, isActiveModeMultipleStaging },\n  ] = useTourEventState('state');\n  const { onCheckIsShowContentControlbarItem, onRenderContentControlbarItem } =\n    useControlbarConfig();\n  const languageProject = useSelector(selectLanguageProject);\n\n  const {\n    //\n    onVR,\n    onToFirstScene,\n    // NOTE: auto change scene\n    isChangeScene,\n    isShowIconChangeScene,\n    onChangeAutoChangeScene,\n    // NOTE: auto rotate\n    isRotate,\n    isShowIconRotate,\n    onToggleRotate,\n    // NOTE: info place\n    isShowIconInfoPlace,\n    onShowInfoPlace,\n    // NOTE: info scene\n    isShowIconInfoScene,\n    onToggleInfoScene,\n    // NOTE: sound scene\n    isShowIconSoundScene,\n    onToggleSoundScene,\n    // NOTE: multiple staging\n    isShowIconMultipleStaging,\n    onToggleModeMultipleStaging,\n  } = useKrpano({ krpanoRef });\n\n  return (\n    <div className=\"nav\">\n      {onCheckIsShowContentControlbarItem('home') && (\n        <Tooltip\n          title={LANGUAGES[languageProject].controlbarFirstScene}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onToFirstScene}>\n            {onRenderContentControlbarItem('home')}\n          </button>\n        </Tooltip>\n      )}\n\n      {isShowIconInfoPlace && onCheckIsShowContentControlbarItem('info_tour') && (\n        <Tooltip\n          title={LANGUAGES[languageProject].controlbarInfoTour}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onShowInfoPlace}>\n            {onRenderContentControlbarItem('info_tour')}\n          </button>\n        </Tooltip>\n      )}\n\n      {isShowIconInfoScene && onCheckIsShowContentControlbarItem('info_scene') && (\n        <Tooltip\n          title={LANGUAGES[languageProject].controlbarInfoScene}\n          placement=\"top\"\n        >\n          <button\n            type=\"button\"\n            className={`act ${visibleDialogPostScene ? 'active' : ''}`}\n            onClick={onToggleInfoScene.bind(this, undefined)}\n          >\n            {onRenderContentControlbarItem('info_scene')}\n          </button>\n        </Tooltip>\n      )}\n\n      {isShowIconSoundScene &&\n        onCheckIsShowContentControlbarItem('sound_scene_off') &&\n        onCheckIsShowContentControlbarItem('sound_scene_on') && (\n          <Tooltip\n            title={LANGUAGES[languageProject].controlbarSoundScene}\n            placement=\"top\"\n          >\n            <button type=\"button\" className=\"act\" onClick={onToggleSoundScene}>\n              {!isSoundOnScene\n                ? onRenderContentControlbarItem('sound_scene_on')\n                : onRenderContentControlbarItem('sound_scene_off')}\n            </button>\n          </Tooltip>\n        )}\n      {isShowIconRotate &&\n        onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n        onCheckIsShowContentControlbarItem('auto_rotate_on') && (\n          <Tooltip\n            title={\n              isRotate\n                ? LANGUAGES[languageProject].controlbarStopRotate\n                : LANGUAGES[languageProject].controlbarStartRotate\n            }\n            placement=\"top\"\n          >\n            <button type=\"button\" className=\"act\" onClick={onToggleRotate}>\n              {!isRotate\n                ? onRenderContentControlbarItem('auto_rotate_on')\n                : onRenderContentControlbarItem('auto_rotate_off')}\n            </button>\n          </Tooltip>\n        )}\n      {isShowIconChangeScene &&\n        onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n        onCheckIsShowContentControlbarItem('auto_change_scene_on') && (\n          <Tooltip\n            title={\n              isChangeScene\n                ? LANGUAGES[languageProject].controlbarStopAutoPlayScene\n                : LANGUAGES[languageProject].controlbarStartAutoPlayScene\n            }\n            placement=\"top\"\n          >\n            <button\n              type=\"button\"\n              className=\"act\"\n              onClick={onChangeAutoChangeScene.bind(this, !isChangeScene)}\n            >\n              {!isChangeScene\n                ? onRenderContentControlbarItem('auto_change_scene_on')\n                : onRenderContentControlbarItem('auto_change_scene_off')}\n            </button>\n          </Tooltip>\n        )}\n\n      {isShowIconMultipleStaging &&\n        onCheckIsShowContentControlbarItem('multi_staging') && (\n          <Tooltip\n            title={\n              isActiveModeMultipleStaging\n                ? LANGUAGES[languageProject]\n                    .controlbarTurnOffModeMultipleStaging\n                : LANGUAGES[languageProject].controlbarTurnOnModeMultipleStaging\n            }\n            placement=\"top\"\n          >\n            <button\n              type=\"button\"\n              className=\"act hide-on-mobile\"\n              onClick={() => onToggleModeMultipleStaging()}\n            >\n              {onRenderContentControlbarItem('multi_staging')}\n            </button>\n          </Tooltip>\n        )}\n\n      {onCheckIsShowContentControlbarItem('vr') && (\n        <Tooltip\n          title={LANGUAGES[languageProject].controlbarVRMode}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act hide-on-mobile\" onClick={onVR}>\n            {onRenderContentControlbarItem('vr')}\n          </button>\n        </Tooltip>\n      )}\n    </div>\n  );\n});\n\nexport default ControlbarCenter;\n","import * as React from 'react';\nimport canUseDom from \"../Dom/canUseDom\";\n\n/**\n * Wrap `React.useLayoutEffect` which will not throw warning message in test env\n */\nvar useLayoutEffect = process.env.NODE_ENV !== 'test' && canUseDom() ? React.useLayoutEffect : React.useEffect;\nexport default useLayoutEffect;\nexport var useLayoutUpdateEffect = function useLayoutUpdateEffect(callback, deps) {\n  var firstMountRef = React.useRef(true);\n  useLayoutEffect(function () {\n    if (!firstMountRef.current) {\n      return callback();\n    }\n  }, deps);\n\n  // We tell react that first mount has passed\n  useLayoutEffect(function () {\n    firstMountRef.current = false;\n    return function () {\n      firstMountRef.current = true;\n    };\n  }, []);\n};"],"names":["getCollapsedHeight","height","opacity","getRealHeight","node","scrollHeight","skipOpacityTransition","_","event","deadline","propertyName","_type__WEBPACK_IMPORTED_MODULE_0__","b","getTransitionDirection","placement","undefined","getTransitionName","rootPrefixCls","motion","transitionName","concat","__webpack_exports__","motionName","onAppearStart","onEnterStart","onAppearActive","onEnterActive","onLeaveStart","offsetHeight","onLeaveActive","onAppearEnd","onEnterEnd","onLeaveEnd","motionDeadline","tuple","_len","arguments","length","args","_key","tupleNum","_len2","_key2","useControlbarConfig","controlbarConfig","useSelector","selectConfigControlbar","onCheckIsShowContentControlbarItem","useCallback","type","config","isHide","onRenderContentControlbarItem","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","i","aria-hidden","className","image","src","img","alt","useMemo","LANGUAGES","en","dialogConfirmSoundTitle","btnOK","btnCancel","controlbarFirstScene","controlbarInfoTour","controlbarInfoScene","controlbarMap","controlbarFloorplan","controlbarTurnOnSoundProject","controlbarTurnOffSoundProject","controlbarSoundScene","controlbarStopRotate","controlbarStartRotate","controlbarStartAutoPlayScene","controlbarStopAutoPlayScene","controlbarVRMode","controlbarFullscreen","controlbarViewNormal","controlbarViewPlanet","controlbarViewMirrorBall","controlbarSettingColor","controlbarTurnOffModeMultipleStaging","controlbarTurnOnModeMultipleStaging","vi","ControlbarCenter","memo","param","krpanoRef","_useTourEventState_","useTourEventState","isSoundOnScene","visibleDialogPostScene","isActiveModeMultipleStaging","languageProject","selectLanguageProject","useKrpano","onVR","onToFirstScene","isChangeScene","isShowIconChangeScene","onChangeAutoChangeScene","isRotate","isShowIconRotate","onToggleRotate","isShowIconInfoPlace","onShowInfoPlace","isShowIconInfoScene","onToggleInfoScene","isShowIconSoundScene","onToggleSoundScene","isShowIconMultipleStaging","onToggleModeMultipleStaging","jsxs","div","Tooltip","title","button","onClick","bind","_this","useLayoutEffect","_Dom_canUseDom__WEBPACK_IMPORTED_MODULE_1__","Z","react__WEBPACK_IMPORTED_MODULE_0__","useEffect","useLayoutUpdateEffect","callback","deps","firstMountRef","useRef","current"],"sourceRoot":""}